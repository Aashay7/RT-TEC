services:
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: te_api
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379/0
      - TRITON_URL=http://triton:8000
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - FEAST_REPO=/app/feast_repo
      - POSTGRES_USER=${POSTGRES_USER:-teuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tepass}
      - POSTGRES_DB=${POSTGRES_DB:-te_audit}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - SCHEMA_SQL_PATH=/app/sql/create_audit_schema.sql
    volumes:
      - ./:/app
      - ./feast_repo:/app/feast_repo
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - triton
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5

  triton:
    image: nvcr.io/nvidia/tritonserver:24.04-py3
    container_name: te_triton
    command:
      [
        "tritonserver",
        "--model-repository=/models",
        "--exit-on-error=true",
        "--model-control-mode=poll",
        "--repository-poll-secs=5",
        "--http-port=8000",
        "--grpc-port=8001",
        "--metrics-port=8002"
      ]
    restart: unless-stopped
    volumes:
      - ./services/inference/model_repository:/models
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"

  redis:
    image: redis:7-alpine
    container_name: te_redis
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-redispassword}"]
    ports:
      - "6379:6379"

  postgres:
    image: postgres:15-alpine
    container_name: te_postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-te_audit}
      - POSTGRES_USER=${POSTGRES_USER:-teuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tepass}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: te_prom
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.4.3
    container_name: te_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin12345}
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.98.0
    container_name: te_otel
    command: ["--config=/etc/otel-collector.yml"]
    volumes:
      - ./monitoring/otel-collector.yml:/etc/otel-collector.yml:ro
    ports:
      - "4317:4317"

volumes:
  pgdata:

  redpanda:
    image: redpandadata/redpanda:v23.3.12
    container_name: te_redpanda
    command:
      - redpanda start
      - --overprovisioned
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr 0.0.0.0:9092
      - --advertise-kafka-addr redpanda:9092
    ports:
      - "9092:9092"
      - "9644:9644"

  redpanda-console:
    image: redpandadata/console:latest
    container_name: te_redpanda_console
    environment:
      - KAFKA_BROKERS=redpanda:9092
    ports:
      - "8081:8080"
    depends_on:
      - redpanda

  ingest:
    build:
      context: ./services/ingest
      dockerfile: Dockerfile
    container_name: te_ingest
    environment:
      - KAFKA_BROKERS=redpanda:9092
      - KAFKA_TOPIC=ticks
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379/0
      - SPREAD_TTL_SEC=180
    depends_on:
      - redpanda
      - redis

  pytools:
    image: python:3.11-slim
    container_name: te_pytools
    working_dir: /app
    volumes:
      - ./:/app
    entrypoint: ["bash","-lc","python -V && tail -f /dev/null"]
